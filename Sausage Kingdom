<!doctype html>
<html lang="ja">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>ソーセージ育成ゲーム</title>
<style>
  :root{
    --bg:#fff7ef;
    --panel:#fff;
    --accent:#ff8a65;
    --muted:#666;
    --good:#2e7d32;
    --bad:#c62828;
  }
  body{
    background: linear-gradient(180deg,#fff7ef 0%, #ffdca8 100%);
    font-family: "Noto Sans JP", system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
    margin:0;
    padding:20px;
    color:#222;
  }
  .container{max-width:900px;margin:0 auto;}
  header{display:flex;align-items:center;gap:12px;margin-bottom:16px}
  h1{margin:0;font-size:1.6rem}
  .game{
    display:grid;
    grid-template-columns: 320px 1fr;
    gap:16px;
  }
  .card{
    background:var(--panel);
    border-radius:12px;
    box-shadow: 0 6px 18px rgba(0,0,0,0.08);
    padding:14px;
  }
  .sausage{
    font-size:72px;
    text-align:center;
    padding:10px 6px;
  }
  .status-list{display:grid;gap:8px}
  .stat{
    display:flex;justify-content:space-between;align-items:center;
    gap:10px;padding:6px;border-radius:8px;background:#fff9f4;border:1px solid rgba(0,0,0,0.03);
  }
  .bar{
    height:12px;border-radius:8px;background:#eee;flex:1;margin-left:10px;margin-right:6px;overflow:hidden;
  }
  .bar > i{display:block;height:100%;background:linear-gradient(90deg,var(--accent),#ffb74d);width:0%}
  .controls{display:flex;flex-wrap:wrap;gap:8px;margin-top:12px}
  button{padding:8px 12px;border-radius:8px;border:0;cursor:pointer;background:var(--accent);color:white;font-weight:600}
  button.secondary{background:#fff;border:1px solid #ddd;color:#333}
  .log{height:140px;overflow:auto;background:#fffbe8;padding:8px;border-radius:8px;border:1px dashed #ffd9b6}
  .meta{display:flex;gap:10px;flex-wrap:wrap;margin-bottom:10px}
  .small{font-size:0.9rem;color:var(--muted)}
  .center{display:flex;justify-content:center;align-items:center}
  .modal-back{position:fixed;inset:0;background:rgba(0,0,0,0.4);display:none;align-items:center;justify-content:center;z-index:60}
  .modal{background:white;padding:18px;border-radius:12px;min-width:320px;box-shadow:0 12px 30px rgba(0,0,0,0.25)}
  .choices{display:flex;gap:8px;flex-wrap:wrap;margin-top:12px}
  .choice{flex:1;padding:10px;border-radius:10px;border:1px solid #ddd;text-align:center;cursor:pointer}
  .stage-tag{display:inline-block;padding:4px 8px;border-radius:999px;background:#fff2e6;border:1px solid #ffd1a8;font-weight:700}
  .burnt{color:var(--bad);font-weight:800}
  footer{margin-top:18px;font-size:0.85rem;color:var(--muted)}
  @media(max-width:820px){
    .game{grid-template-columns:1fr; }
  }
</style>
</head>
<body>
<div class="container">
  <header>
    <h1>ソーセージ育成ゲーム 🌭</h1>
    <div class="small">かわいい / かっこいいを選んで育てよう！経験値で進化（モーダル選択）</div>
  </header>

  <div class="game">
    <div class="card">
      <div id="selection-area">
        <h3>最初のソーセージを選んでください</h3>
        <div class="choices">
          <div class="choice" data-type="cute" id="choose-cute">
            <div style="font-size:48px">🌸🥰</div>
            <div>かわいいソーセージ</div>
            <div class="small">ジューシーで人気が出やすい</div>
          </div>
          <div class="choice" data-type="cool" id="choose-cool">
            <div style="font-size:48px">🔥😎</div>
            <div>かっこいいソーセージ</div>
            <div class="small">焼きが得意で長さが伸びやすい</div>
          </div>
        </div>
      </div>

      <div id="game-area" style="display:none">
        <div class="sausage" id="sausage-visual">🌭</div>
        <div class="meta">
          <div>ステージ: <span id="stage" class="stage-tag">ベビー</span></div>
          <div>長さ: <strong id="lengthVal">10</strong> cm</div>
          <div>経験値: <strong id="xpVal">0</strong></div>
        </div>

        <div class="status-list" id="status-list">
          <!-- stat rows injected by JS -->
        </div>

        <div class="controls">
          <button id="btn-bake">焼く 🔥</button>
          <button id="btn-ketchup" class="secondary">ケチャップ 🍅</button>
          <button id="btn-mustard" class="secondary">マスタード 🌭</button>
          <button id="btn-exercise">運動（ストレッチ）🏃</button>
          <button id="btn-rest" class="secondary">休ませる 💤</button>
          <button id="btn-save" class="secondary">セーブ</button>
          <button id="btn-reset" class="secondary">リセット</button>
        </div>

        <h4 style="margin-top:12px">ログ</h4>
        <div class="log" id="log"></div>
      </div>
    </div>

    <div class="card">
      <h3>説明・ヒント</h3>
      <ul>
        <li class="small">時間経過でジューシー度・人気度は徐々に下がります。焼きすぎ注意！</li>
        <li class="small">焼くと焼き加減が上がり、ジューシー度が減る。焦げる（100超）とペナルティ。</li>
        <li class="small">ケチャップ/マスタードは人気度を上げ、少量の経験値も与えます。</li>
        <li class="small">運動は長さとジューシー度を少し上げ、経験値も増やす。</li>
        <li class="small">休ませるとジューシー度回復と焼き加減の自然低下（冷ます）が早くなります。</li>
        <li class="small">XPが閾値（例: 30, 80, 200）を超えると進化モーダルが出ます。</li>
      </ul>
      <hr>
      <h4>保存</h4>
      <div class="small">データはブラウザのローカルストレージに保存されます。セーブボタンで手動保存。</div>
      <footer>GitHubに置く場合は index.html をリポジトリに追加して GitHub Pages を有効化してください。</footer>
    </div>
  </div>
</div>

<!-- 進化/選択モーダル -->
<div class="modal-back" id="modal-back">
  <div class="modal" id="modal">
    <h3 id="modal-title">進化を選んでください</h3>
    <div id="modal-desc" class="small">経験値によって選べる進化が増えます。</div>
    <div class="choices" id="modal-choices"></div>
    <div style="text-align:right;margin-top:10px">
      <button id="modal-cancel" class="secondary">あとで</button>
    </div>
  </div>
</div>

<script>
/*
  ソーセージ育成ゲーム - 単一ファイル実装
  ※ 中身はカスタマイズしやすくしています
*/

const DEFAULT = {
  doneness: 10, // 焼き加減 0-120 (100超で焦げ)
  juiciness: 80, // ジューシー度 0-100
  popularity: 40, // 人気度 0-100
  length: 10, // 長さ (cm) 任意スケール
  xp: 0,
  stage: 'ベビー', // 進化ステージ名
  type: 'cute', // cute / cool
  name: '', // 後でつけられる
  lastTick: Date.now()
};

let state = loadState() || {...DEFAULT};
let tickInterval = null;
const TICK_MS = 1000; // 1秒ごとに時間経過処理

// XP thresholds for evolution (可変)
const EVOL_THRESHOLDS = [30, 80, 200];

// DOM refs
const selectionArea = document.getElementById('selection-area');
const gameArea = document.getElementById('game-area');
const sausageVisual = document.getElementById('sausage-visual');
const stageTag = document.getElementById('stage');
const lengthVal = document.getElementById('lengthVal');
const xpVal = document.getElementById('xpVal');
const statusList = document.getElementById('status-list');
const logEl = document.getElementById('log');
const modalBack = document.getElementById('modal-back');
const modalChoices = document.getElementById('modal-choices');
const modalTitle = document.getElementById('modal-title');
const modalDesc = document.getElementById('modal-desc');

document.getElementById('choose-cute').addEventListener('click', ()=>startGame('cute'));
document.getElementById('choose-cool').addEventListener('click', ()=>startGame('cool'));
document.getElementById('btn-bake').addEventListener('click', ()=>doAction('bake'));
document.getElementById('btn-ketchup').addEventListener('click', ()=>doAction('ketchup'));
document.getElementById('btn-mustard').addEventListener('click', ()=>doAction('mustard'));
document.getElementById('btn-exercise').addEventListener('click', ()=>doAction('exercise'));
document.getElementById('btn-rest').addEventListener('click', ()=>doAction('rest'));
document.getElementById('btn-save').addEventListener('click', saveStateAndLog);
document.getElementById('btn-reset').addEventListener('click', resetGame);
document.getElementById('modal-cancel').addEventListener('click', closeModal);

// 初回ロード表示
render();

function startGame(type){
  state.type = type;
  state.stage = 'ベビー';
  // 初期値を種別により微調整
  if(type === 'cute'){
    state.juiciness = 90;
    state.popularity = 50;
    state.length = 9;
  } else {
    state.juiciness = 75;
    state.popularity = 35;
    state.length = 12;
  }
  state.xp = 0;
  state.doneness = 10;
  saveState();
  selectionArea.style.display = 'none';
  document.getElementById('game-area').style.display = '';
  log(`新しい${type==='cute'?'かわいい':'かっこいい'}ソーセージを育て始めた！`);
  startTick();
  render();
}

function startTick(){
  if(tickInterval) clearInterval(tickInterval);
  tickInterval = setInterval(tick, TICK_MS);
}

function tick(){
  // 時間差を考慮して安全に処理
  // 毎秒: 自動減少と自動XP
  // 焦げ（doneness>100) 時はペナルティ：ジューシー減少が速く、人気度下がる
  const burnt = state.doneness > 100;
  // 自然の変化（タイプによって微調整）
  const juicinessDecay = burnt ? 1.2 : 0.4;
  const popularityDecay = burnt ? 0.6 : 0.15;
  const donenessDecayWhileRest = 0.6; // 冷ますと下がる

  // 自動減少
  state.juiciness = clamp(state.juiciness - juicinessDecay, 0, 200);
  state.popularity = clamp(state.popularity - popularityDecay, 0, 200);

  // 自動 XP（飼い主が世話していないと少しずつ入る — 成長の時間）
  let xpGain = 0.05 + (state.popularity/5000) + (state.juiciness/10000);
  if(burnt) xpGain *= 0.5; // 焦げると成長が落ちる
  state.xp += xpGain;

  // 少しだけ自然に焼きが進む（放置で火が通る）
  state.doneness = clamp(state.doneness + 0.08, 0, 1000);

  // 長さもわずかに減る（乾燥）
  state.length = clamp(state.length - 0.002, 2, 300);

  // If juiciness too low, popularity drops more
  if(state.juiciness < 25) state.popularity = clamp(state.popularity - 0.3, 0, 200);

  // Check for XP threshold for evolution
  checkForEvolution();

  saveState();
  render();
}

// アクション実装
function doAction(action){
  if(!gameArea || gameArea.style.display === 'none') return;
  switch(action){
    case 'bake':
      state.doneness = clamp(state.doneness + 8 + (state.type==='cool'?3:0), 0, 1000);
      state.juiciness = clamp(state.juiciness - 6, 0, 200);
      state.xp += 2 + (state.type==='cool'?0.5:0);
      log('焼いた！焼き加減が上がった。');
      // 焦げ始めたら警告
      if(state.doneness > 95 && state.doneness <= 110) log('注意：焦げそう！🔥', true);
      if(state.doneness > 120){
        // 焦げ過ぎペナルティ
        state.popularity = clamp(state.popularity - 8, 0, 200);
        state.juiciness = clamp(state.juiciness - 8, 0, 200);
        log('焦げた！人気とジューシー度が大幅ダウン！', true);
      }
      break;

    case 'ketchup':
      state.popularity = clamp(state.popularity + 6 + (state.type==='cute'?2:0), 0, 200);
      state.xp += 1;
      log('ケチャップをかけた。人気が上がった！');
      break;

    case 'mustard':
      state.popularity = clamp(state.popularity + 4 + (state.type==='cool'?3:0), 0, 200);
      state.xp += 1;
      log('マスタードをかけた。個性が出た！');
      break;

    case 'exercise':
      // ストレッチで長さとジューシーさを少し回復、XPも
      state.length = clamp(state.length + 0.4 + (state.type==='cool'?0.2:0), 2, 300);
      state.juiciness = clamp(state.juiciness + 3, 0, 200);
      state.xp += 3;
      state.popularity = clamp(state.popularity + 1, 0, 200);
      log('運動（ストレッチ）した！長さとジューシー度が上がった。');
      break;

    case 'rest':
      // 休ませるとジューシー回復・焼き加減の自然低下（冷ます）
      state.juiciness = clamp(state.juiciness + 6, 0, 200);
      state.doneness = clamp(state.doneness - 6, 0, 1000);
      state.xp += 0.8;
      log('休ませた。冷めてジューシー度が回復した。');
      break;

    default:
      console.warn('unknown action', action);
  }
  saveState();
  render();
  checkForEvolution(); // 即時チェック（大きなXP増加のとき）
}

function checkForEvolution(){
  // Stage evolution logic: if XP past threshold and not already at or beyond that stage, show modal with options
  // We'll define simple stage ordering: ベビー -> 若葉 -> 成熟 -> 完成
  // For each threshold we offer choices
  const xp = state.xp;
  // Determine which threshold is next
  let nextIndex = EVOL_THRESHOLDS.findIndex(t => xp >= t && !state._evolvedAt?.includes(t));
  if(nextIndex >= 0){
    // Show choices for that threshold
    const threshold = EVOL_THRESHOLDS[nextIndex];
    showEvolutionModal(threshold);
  }
}

// 進化モーダル
function showEvolutionModal(threshold){
  // ensure _evolvedAt array
  if(!state._evolvedAt) state._evolvedAt = [];
  // Prepare choices depending on threshold
  modalChoices.innerHTML = '';
  modalTitle.textContent = `進化（XP ${Math.round(state.xp)}） - 選択してください`;
  modalDesc.textContent = `以下から一つ選んで進化させよう！（XP ${threshold}到達）`;
  const options = getEvolutionOptionsByThreshold(threshold);
  options.forEach(opt => {
    const d = document.createElement('div');
    d.className = 'choice';
    d.innerHTML = `<div style="font-size:28px">${opt.icon}</div><div style="font-weight:700">${opt.name}</div><div class="small">${opt.desc}</div>`;
    d.addEventListener('click', ()=>applyEvolution(opt, threshold));
    modalChoices.appendChild(d);
  });
  openModal();
}

function getEvolutionOptionsByThreshold(threshold){
  // example options mapping
  if(threshold === EVOL_THRESHOLDS[0]){ // 30
    return [
      {id:'cheese', name:'チーズ入りソーセージ', icon:'🧀🌭', desc:'ジューシー度が上がり、人気UP', apply: (s)=>{s.juiciness += 10; s.popularity += 8; s.stage='チーズ入り';}},
      {id:'hotdog', name:'ホットドッグ化', icon:'🌭🍞', desc:'人気が上がり、XP効率少しUP', apply: (s)=>{s.popularity += 12; s.xp += 5; s.stage='ホットドッグ';}},
      {id:'mini', name:'ミニフランク', icon:'🥨🌭', desc:'長さは小さくなるが味の濃さUP', apply: (s)=>{s.length = Math.max(6, s.length-2); s.popularity += 5; s.stage='ミニフランク';}}
    ];
  } else if(threshold === EVOL_THRESHOLDS[1]) { // 80
    return [
      {id:'frank', name:'フランクフルト', icon:'🇩🇪🌭', desc:'長さと人気が大幅UP', apply: (s)=>{s.length += 6; s.popularity += 18; s.stage='フランクフルト';}},
      {id:'spicy', name:'スパイシー', icon:'🌶️🌭', desc:'人気は賛否あり。ジューシー減少だがXP増', apply: (s)=>{s.popularity += 10; s.juiciness -= 6; s.xp += 10; s.stage='スパイシー';}},
      {id:'gourmet', name:'グルメソーセージ', icon:'🍷🌭', desc:'全体バランスに優れる', apply: (s)=>{s.juiciness += 6; s.popularity += 10; s.length += 2; s.stage='グルメ';}}
    ];
  } else { // higher threshold 200
    return [
      {id:'legend', name:'伝説のソーセージ', icon:'🏆🌭', desc:'圧倒的な人気と特別能力', apply: (s)=>{s.popularity += 40; s.juiciness += 20; s.stage='伝説';}},
      {id:'street', name:'ストリートソウル', icon:'🚚🌭', desc:'多くの顧客を引き寄せる', apply: (s)=>{s.popularity += 30; s.length += 10; s.stage='ストリート';}},
      {id:'artisan', name:'職人仕込み', icon:'🪓🌭', desc:'長く安定した価値を生む', apply: (s)=>{s.juiciness += 10; s.xp += 30; s.stage='職人';}}
    ];
  }
}

function applyEvolution(option, threshold){
  option.apply(state);
  // record that this threshold used
  if(!state._evolvedAt) state._evolvedAt = [];
  state._evolvedAt.push(threshold);
  log(`進化！ -> ${option.name} を選んだ。`);
  closeModal();
  saveState();
  render();
}

// モーダル制御
function openModal(){ modalBack.style.display = 'flex'; }
function closeModal(){ modalBack.style.display = 'none'; }

// レンダリング
function render(){
  // Visual based on type and doneness
  let face = '🌭';
  if(state.type === 'cute') face = '🌭';
  else face = '🌭';
  // Represent doneness visually: color via text or emoji changes
  if(state.doneness > 120){
    sausageVisual.innerHTML = '🔥🌭🔥';
    sausageVisual.classList.add('burnt');
  } else if(state.doneness > 95){
    sausageVisual.innerHTML = '🌭🔥';
    sausageVisual.classList.remove('burnt');
  } else if(state.doneness > 60){
    sausageVisual.innerHTML = '🥓🌭';
    sausageVisual.classList.remove('burnt');
  } else {
    sausageVisual.innerHTML = face;
    sausageVisual.classList.remove('burnt');
  }

  stageTag.textContent = state.stage || 'ベビー';
  lengthVal.textContent = state.length.toFixed(1);
  xpVal.textContent = Math.floor(state.xp);

  // build status list
  statusList.innerHTML = '';
  addStatRow('焼き加減', Math.round(state.doneness), 0, 120, state.doneness>100 ? 'burnt' : '');
  addStatRow('ジューシー度', Math.round(state.juiciness), 0, 100);
  addStatRow('人気度', Math.round(state.popularity), 0, 100);
  addStatRow('長さ (cm)', Number(state.length.toFixed(1)), 0, 300);
  addStatRow('経験値', Math.floor(state.xp), 0, 1000);

  // auto-scroll log to bottom
  logEl.scrollTop = logEl.scrollHeight;
}

function addStatRow(label, value, min=0, max=100, extraClass=''){
  const row = document.createElement('div');
  row.className = 'stat';
  const left = document.createElement('div');
  left.innerHTML = `<div style="font-weight:700">${label}</div><div class="small">${value}</div>`;
  const bar = document.createElement('div');
  bar.className = 'bar';
  const inner = document.createElement('i');
  let pct = 0;
  if(max>min) pct = ((value - min) / (max - min)) * 100;
  inner.style.width = pct + '%';
  bar.appendChild(inner);
  row.appendChild(left);
  row.appendChild(bar);
  statusList.appendChild(row);
}

// ログ
function log(text, alert=false){
  const p = document.createElement('div');
  p.innerHTML = `<span style="font-size:0.9rem">${new Date().toLocaleTimeString()}</span> - ${text}`;
  if(alert) p.style.color = '#b71c1c';
  logEl.appendChild(p);
}

// 端末記憶
function saveState(){
  const toSave = {...state};
  // remove functions etc.
  localStorage.setItem('sausage_state_v1', JSON.stringify(toSave));
}
function saveStateAndLog(){
  saveState();
  log('ゲームをセーブしました。');
}

function loadState(){
  try{
    const raw = localStorage.getItem('sausage_state_v1');
    if(!raw) return null;
    const s = JSON.parse(raw);
    // make sure numeric fields exist
    return s;
  }catch(e){
    return null;
  }
}

function resetGame(){
  if(confirm('本当にリセットしますか？現在の進行は失われます。')){
    localStorage.removeItem('sausage_state_v1');
    state = {...DEFAULT};
    selectionArea.style.display = '';
    document.getElementById('game-area').style.display = 'none';
    clearInterval(tickInterval);
    tickInterval = null;
    logEl.innerHTML = '';
    render();
  }
}

// ユーティリティ
function clamp(v, a, b){ return Math.max(a, Math.min(b, v)); }

// 初期レンダリング（ロード済み state があればゲームエリア表示）
(function initOnLoad(){
  if(state && state.stage && state.stage !== 'ベビー' || state.xp > 0 || (state.type && state.type!=='') ){
    // If state contains progress, resume
    selectionArea.style.display = 'none';
    document.getElementById('game-area').style.display = '';
    startTick();
    log('前回のセーブから再開しました。');
  }
  render();
})();

</script>
</body>
</html>
